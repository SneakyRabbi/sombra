#!/usr/bin/env node
/**
 * decrypt a password based on the class.authentication.php scheme
 *
 * Author: Dave Eddy <dave@daveeddy.com>
 * Date: October 21, 2016
 * License: MIT
 */

var encrypted = process.argv[2];

function chr(n) {
  return String.fromCharCode(n);
}

function hexdec(d) {
  return parseInt(d, 16);
}

function base64_decode(s) {
  return new Buffer(s, 'base64').toString('utf8');
}

function strrev(s) {
  return s.split('').reverse().join('');
}

function str_rot(s, n) {
  // ripped from the `caesar-cipher` program
  var output = [];
  for (var i = 0; i < s.length; i++) {
    var c = s[i];
    var code = c.charCodeAt(0);

    if ((code >= 65) && (code <= 90))
      c = String.fromCharCode(((code - 65 + n) % 26) + 65);
    else if ((code >= 97) && (code <= 122))
      c = String.fromCharCode(((code - 97 + n) % 26) + 97);

    output.push(c);
  }

  return output.join('');
}

function decrypt(s) {
  var decrypted = [];

  s = s.replace(/\?/g, '=');
  s = s.split(':');
  s.forEach(function (chunk, salt) {
    if (salt % 2 === 0)
      chunk = strrev(chunk);

    chunk = base64_decode(chunk);
    chunk = hexdec(chunk);
    chunk = chr(chunk / 3);
    chunk = str_rot(chunk, 26 - (salt + 3));

    //console.log(chunk);
    decrypted.push(chunk);
  });

  return decrypted.join('');
}

console.log(decrypt(encrypted));
